rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Common function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Function to check if user is accessing their own data
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Function to check if the document exists
    function exists(path) {
      return exists(/databases/$(database)/documents/$(path));
    }
    
    // Function to check if the user has completed onboarding
    function hasCompletedOnboarding() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.questionnaire.weekendSoundtrack != "";
    }
    
    // Function to check if the user has already posted today
    function hasPostedToday() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.hasPostedToday == true;
    }
    
    // Users collection
    match /users/{userId} {
      // Users can read any public profile
      allow read: if isAuthenticated();
      
      // Users can only create/update their own profile
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && 
                     // Ensure settings fields can be updated
                     (!request.resource.data.diff(resource.data).affectedKeys()
                        .hasAny(['settings', 'photoURL', 'displayName', 'bio']) || 
                      isOwner(userId));
      
      // Users can't delete profiles
      allow delete: if false;
      
      // Subcollections within users
      match /privateData/{document=**} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // Posts collection
    match /posts/{postId} {
      // Anyone can read posts
      allow read: if isAuthenticated();
      
      // Users can create posts if they haven't posted today
      allow create: if isAuthenticated() && 
                     hasCompletedOnboarding() && 
                     !hasPostedToday() && 
                     request.resource.data.userId == request.auth.uid;
      
      // Users can only update or delete their own posts
      allow update, delete: if isOwner(resource.data.userId);
      
      // Comments subcollection
      match /comments/{commentId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
        allow update, delete: if isOwner(resource.data.userId);
      }
    }
    
    // Matches collection
    match /matches/{matchId} {
      // Users can only access their own matches
      allow read: if isAuthenticated() && 
                   (resource.data.user1Id == request.auth.uid || 
                    resource.data.user2Id == request.auth.uid);
      
      // Only the system should create matches (via Cloud Functions)
      allow create: if false;
      
      // Users can update match status
      allow update: if isAuthenticated() && 
                     (resource.data.user1Id == request.auth.uid || 
                      resource.data.user2Id == request.auth.uid);
      
      // Prevent match deletion
      allow delete: if false;
    }
    
    // System analytics and metrics (admin only)
    match /analytics/{document=**} {
      allow read, write: if false; // Manage via Cloud Functions
    }
  }
} 