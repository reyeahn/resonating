rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ==========================================
    // HELPER FUNCTIONS
    // ==========================================
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // ==========================================
    // USERS COLLECTION
    // ==========================================
    
    match /users/{userId} {
      // Read: Any authenticated user can read user profiles (needed for matching)
      allow read: if isAuthenticated();
      
      // Create: Users can only create their own profile
      allow create: if isOwner(userId) && isAuthenticated();
      
      // Update: Users can update their own profile OR when involved in friend operations
      allow update: if isAuthenticated() && (
        // User updating their own profile
        isOwner(userId) ||
        // Friend request operations: allow updating friends list when current user is involved
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['friends']) &&
         (request.auth.uid in request.resource.data.friends || request.auth.uid in resource.data.friends))
      );
      
      // Delete: Users cannot delete profiles
      allow delete: if false;
    }
    
    // ==========================================
    // POSTS COLLECTION
    // ==========================================
    
    match /posts/{postId} {
      // Read: Any authenticated user can read posts (needed for discover/matching)
      allow read: if isAuthenticated();
      
      // Create: Users can create posts with their own userId
      allow create: if isAuthenticated() && 
                     request.resource.data.userId == request.auth.uid;
      
      // Update: Users can update their own posts OR update interaction fields on any post
      allow update: if isAuthenticated() && (
        // User updating their own post
        resource.data.userId == request.auth.uid ||
        // User updating likes/comments/likedBy fields only (for liking and commenting)
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'comments', 'likedBy'])
      );
      
      // Delete: Users can only delete their own posts
      allow delete: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid;
    }
    
    // ==========================================
    // COMMENTS COLLECTION
    // ==========================================
    
    match /comments/{commentId} {
      // Read: Any authenticated user can read comments
      allow read: if isAuthenticated();
      
      // Create: Users can create comments with their own userId
      allow create: if isAuthenticated() && 
                     request.resource.data.userId == request.auth.uid;
      
      // Update: Users can only update their own comments
      allow update: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid;
      
      // Delete: Users can only delete their own comments
      allow delete: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid;
    }
    
    // ==========================================
    // SWIPES COLLECTION
    // ==========================================
    
    match /swipes/{swipeId} {
      // Read: Any authenticated user can read swipes (needed for matching algorithm)
      allow read: if isAuthenticated();
      
      // Create: Users can create swipes with their own swiperId
      allow create: if isAuthenticated() && 
                     request.resource.data.swiperId == request.auth.uid;
      
      // Update: Users can only update their own swipes
      allow update: if isAuthenticated() && 
                     resource.data.swiperId == request.auth.uid;
      
      // Delete: Users can only delete their own swipes
      allow delete: if isAuthenticated() && 
                     resource.data.swiperId == request.auth.uid;
    }
    
    // ==========================================
    // MATCHES COLLECTION & SUBCOLLECTIONS
    // ==========================================
    
    match /matches/{matchId} {
      // Read: Any authenticated user can read matches (needed for matching algorithm)
      allow read: if isAuthenticated();
      
      // Create: Users can create matches (for matching algorithm)
      allow create: if isAuthenticated();
      
      // Update: Users can update matches they are part of
      allow update: if isAuthenticated() && 
                     (request.auth.uid in resource.data.userIds);
      
      // Delete: Users can delete matches they are part of
      allow delete: if isAuthenticated() && 
                     (request.auth.uid in resource.data.userIds);
      
      // Messages subcollection within matches
      match /messages/{messageId} {
        // Read: Users can read messages in matches they are part of
        allow read: if isAuthenticated() && 
                     (request.auth.uid in get(/databases/$(database)/documents/matches/$(matchId)).data.userIds);
        
        // Create: Users can create messages in matches they are part of with their own senderId
        allow create: if isAuthenticated() && 
                       request.resource.data.senderId == request.auth.uid &&
                       (request.auth.uid in get(/databases/$(database)/documents/matches/$(matchId)).data.userIds);
        
        // Update: Users can update their own messages
        allow update: if isAuthenticated() && 
                       resource.data.senderId == request.auth.uid;
        
        // Delete: Users can delete their own messages
        allow delete: if isAuthenticated() && 
                       resource.data.senderId == request.auth.uid;
      }
    }
    
    // ==========================================
    // FRIEND REQUESTS COLLECTION
    // ==========================================
    
    match /friendRequests/{requestId} {
      // Read: Users can read requests where they are sender or recipient
      allow read: if isAuthenticated() && 
                   (resource.data.fromUserId == request.auth.uid || 
                    resource.data.toUserId == request.auth.uid);
      
      // Create: Users can create friend requests with their own fromUserId
      allow create: if isAuthenticated() && 
                     request.resource.data.fromUserId == request.auth.uid;
      
      // Update: Users can update requests where they are sender or recipient
      allow update: if isAuthenticated() && 
                     (resource.data.fromUserId == request.auth.uid || 
                      resource.data.toUserId == request.auth.uid);
      
      // Delete: Users can delete requests where they are sender or recipient
      allow delete: if isAuthenticated() && 
                     (resource.data.fromUserId == request.auth.uid || 
                      resource.data.toUserId == request.auth.uid);
    }
    
    // ==========================================
    // NOTIFICATIONS COLLECTION
    // ==========================================
    
    match /notifications/{notificationId} {
      // Read: Users can only read their own notifications
      allow read: if isAuthenticated() && 
                   resource.data.userId == request.auth.uid;
      
      // Create: Any authenticated user can create notifications (for friend requests, etc.)
      allow create: if isAuthenticated();
      
      // Update: Users can only update their own notifications
      allow update: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid;
      
      // Delete: Users can only delete their own notifications
      allow delete: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid;
    }
    
    // ==========================================
    // CONVERSATIONS COLLECTION & SUBCOLLECTIONS
    // ==========================================
    
    match /conversations/{conversationId} {
      // Read: Users can read conversations they are participants in
      // conversationId format: {userId1}_{userId2}, so extract userIds from conversationId
      allow read: if isAuthenticated() && (
        resource == null ||
        (request.auth.uid in resource.data.participants) ||
        (request.auth.uid == conversationId.split('_')[0]) ||
        (request.auth.uid == conversationId.split('_')[1])
      );
      
      // Create: Users can create conversations if they are a participant
      allow create: if isAuthenticated() && (
        (request.auth.uid in request.resource.data.participants) &&
        ((request.auth.uid == conversationId.split('_')[0]) ||
         (request.auth.uid == conversationId.split('_')[1]))
      );
      
      // Update: Users can update conversations they are participants in
      allow update: if isAuthenticated() && 
                     (request.auth.uid in resource.data.participants);
      
      // Delete: Users can delete conversations they are participants in
      allow delete: if isAuthenticated() && 
                     (request.auth.uid in resource.data.participants);
      
      // Messages subcollection within conversations
      match /messages/{messageId} {
        // Read: Users can read messages in conversations they participate in
        allow read: if isAuthenticated() && 
                     (request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants);
        
        // Create: Users can create messages in conversations they participate in with their own senderId
        allow create: if isAuthenticated() && 
                       request.resource.data.senderId == request.auth.uid &&
                       (request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants);
        
        // Update: Users can update their own messages OR mark any message as read if they're a participant
        allow update: if isAuthenticated() && (
          // User updating their own message
          resource.data.senderId == request.auth.uid ||
          // User marking message as read (only isRead field can be changed)
          (request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants &&
           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']) &&
           request.resource.data.isRead == true)
        );
        
        // Delete: Users can delete their own messages
        allow delete: if isAuthenticated() && 
                       resource.data.senderId == request.auth.uid;
      }
    }
    
    // ==========================================
    // WEEKLY REPORTS COLLECTION
    // ==========================================
    
    match /weeklyReports/{reportId} {
      // Read: Users can only read their own weekly reports
      // reportId format: {userId}_{date}, so extract userId from reportId
      allow read: if isAuthenticated() && 
                   (resource == null || request.auth.uid == resource.data.userId ||
                    request.auth.uid == reportId.split('_')[0]);
      
      // Create: Users can create their own weekly reports
      allow create: if isAuthenticated() && 
                     request.resource.data.userId == request.auth.uid &&
                     request.auth.uid == reportId.split('_')[0];
      
      // Update: Users can update their own weekly reports
      allow update: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid;
      
      // Delete: Users can delete their own weekly reports
      allow delete: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid;
    }
    
    // ==========================================
    // ANALYTICS COLLECTION
    // ==========================================
    
    match /analytics/{document} {
      // Read: Allow authenticated users to read analytics (for app functionality)
      allow read: if isAuthenticated();
      
      // Write: Allow authenticated users to write analytics (for user-generated reports)
      allow write: if isAuthenticated();
    }
    
    // ==========================================
    // GLOBAL ANALYTICS COLLECTION
    // ==========================================
    
    match /globalAnalytics/{document} {
      // Read: Allow authenticated users to read global analytics
      allow read: if isAuthenticated();
      
      // Write: System only - prevent user writes
      allow write: if false;
    }
    
    // ==========================================
    // SEARCH INDEX COLLECTION
    // ==========================================
    
    match /searchIndex/{document} {
      // Read: Allow authenticated users to search
      allow read: if isAuthenticated();
      
      // Write: System managed only
      allow write: if false;
    }
    
    // ==========================================
    // USER SUBCOLLECTIONS (catch-all for user data)
    // ==========================================
    
    match /users/{userId}/{subcollection=**} {
      // Users can read/write all their own subcollections
      allow read, write: if isOwner(userId) && isAuthenticated();
    }
    
    // ==========================================
    // SPOTIFY INTEGRATION DATA
    // ==========================================
    
    match /spotifyData/{userId} {
      // Users can only access their own Spotify data
      allow read, write: if isOwner(userId) && isAuthenticated();
    }
    
    // ==========================================
    // MUSIC PREFERENCES AND SETTINGS
    // ==========================================
    
    match /musicPreferences/{userId} {
      // Users can only access their own music preferences
      allow read, write: if isOwner(userId) && isAuthenticated();
    }
    
    match /userSettings/{userId} {
      // Users can only access their own settings
      allow read, write: if isOwner(userId) && isAuthenticated();
    }
    
    // ==========================================
    // TEMPORARY/SYSTEM COLLECTIONS
    // ==========================================
    
    match /temp/{document=**} {
      // Allow authenticated users to create temporary data
      allow read, write: if isAuthenticated();
    }
    
    match /system/{document=**} {
      // System collections - read only for users
      allow read: if isAuthenticated();
      allow write: if false;
    }
  }
} 